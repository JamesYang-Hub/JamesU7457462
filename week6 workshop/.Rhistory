<<<<<<< Updated upstream
fit1
# library(dplyr)
# library(rstatix)
# library(reshape2)
# result=melt(fit1) %>%
#   group_by(species) %>%
#   t_test(species ~ treatment)
# result
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
=======
#     filter(species==data_species[i]& treatment== 'CO2')
#
#   # fit_control_temp <- mean()
#  mean_difference[i] <- mean(as.numeric(fit_control[3]))-mean(as.numeric(fit_CO2[3]))
#  pval[i] <- t.test(fit_control[3],fit_CO2[3])$p.value
#  dfval[i]<- t.test(fit_control[3],fit_CO2[3])$df
>>>>>>> Stashed changes
#
# }
#
# for (i in 1:6) { print(i)}
#
# pval
# dfval
# mean_difference
#如果没有安装dplyr，rstatix和reshape2这三个R包，先去掉下面三行的#，运行进行安装
# install.packages("BiocManager")
# BiocManager::install("dplyr")
# BiocManager::install("rstatix")
# BiocManager::install("reshape2")
#
# library(dplyr)
# library(rstatix)
# library(reshape2)
# result=melt(fit1) %>%
#   group_by(species) %>%
#   t_test(species ~ treatment)
# result
# Provide the difference in means, their 95% confidence intervals, t-statistic, df and p-value.
fit1 <- drop_data %>% select(species,treatment,activity) %>% group_by(species) %>% summarise(broom::tidy(t.test(activity~treatment, data = cur_data())), .groups = "keep")
fit1 %>% select(statistic,conf.low,conf.high,p.value,parameter)
fit2<- drop_data %>% select(species,treatment,sl)%>% group_by(species) %>% summarise(broom::tidy(t.test(activity~treatment, data = cur_data())), .groups = "keep")
#
# data_species <- c('acantho','ambon','chromis','humbug','lemon','whitedams')
# pval <- c()
# dfval <- c()
# mean_difference <- c()
# for (i in 1:6) {
#   fit_control <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'control')
#
#   fit_CO2 <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'CO2')
#
#   # fit_control_temp <- mean()
#  mean_difference[i] <- mean(as.numeric(fit_control[3]))-mean(as.numeric(fit_CO2[3]))
#  pval[i] <- t.test(fit_control[3],fit_CO2[3])$p.value
#  dfval[i]<- t.test(fit_control[3],fit_CO2[3])$df
#
# }
#
# for (i in 1:6) { print(i)}
#
# pval
# dfval
# mean_difference
#如果没有安装dplyr，rstatix和reshape2这三个R包，先去掉下面三行的#，运行进行安装
# install.packages("BiocManager")
# BiocManager::install("dplyr")
# BiocManager::install("rstatix")
# BiocManager::install("reshape2")
#
# library(dplyr)
# library(rstatix)
# library(reshape2)
# result=melt(fit1) %>%
#   group_by(species) %>%
#   t_test(species ~ treatment)
# result
# Provide the difference in means, their 95% confidence intervals, t-statistic, df and p-value.
fit1 <- drop_data %>% select(species,treatment,activity) %>% group_by(species) %>% summarise(broom::tidy(t.test(activity~treatment, data = cur_data())), .groups = "keep")
fit1 %>% select(statistic,conf.low,conf.high,p.value,parameter)
fit2<- drop_data %>% select(species,treatment,sl)%>% group_by(species) %>% summarise(broom::tidy(t.test(sl~treatment, data = cur_data())), .groups = "keep")
fit2 %>% select(statistic,conf.low,conf.high,p.value,parameter)
fit_control <- drop_data %>% select(species,treatment,activity) %>%  filter(species=='acantho'& treatment== 'control')
# fit_control <- as.numeric(as.character(fit_control))
fit_control <- as.numeric(unlist(fit_control))
fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  mean()
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  mean(.)
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  mean([[.x]])
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  summarise(mean(.))
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  summarise(mean())
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  summarise(mean(.x))
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  summarise(mean())
drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity)
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>% summarise(mean())
drop_data %>% filter(species=='acantho'& treatment== 'control')
drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% summarise(mean = mean(activity))
View(fit_control)
?fig.cap
#
data_species <- c('acantho','ambon','chromis','humbug','lemon','whitedams')
pval <- c()
dfval <- c()
mean_difference <- c()
for (i in 1:6) {
fit_control <- drop_data %>%
select(species,treatment,activity) %>%
filter(species==data_species[i]& treatment== 'control')
fit_CO2 <- drop_data %>%
select(species,treatment,activity) %>%
filter(species==data_species[i]& treatment== 'CO2')
# fit_control_temp <- mean()
mean_difference[i] <-  abs( ( drop_data %>% filter(species==data_species[i]& treatment=='control') %>% summarise(mean = mean(activity)))-   (     drop_data %>% filter(species==data_species[i]& treatment== 'CO2' ) %>% summarise(mean = mean(activity))
pval[i] <- t.test(fit_control[3],fit_CO2[3])$p.value
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
library(tidyverse)
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data <- na.omit(data)
data
# Drop irrelevant columns
# drop_data <- data[,!names(data)%in% c('loc','comment','...1')]
# drop_data <- data %>% select(-loc,-comment,-...1)
drop_data <- data[3:8]
drop_data
# Drop irrelevant columns
# drop_data <- data[,!names(data)%in% c('loc','comment','...1')]
# drop_data <- data %>% select(-loc,-comment,-...1)
drop_data <- data[,C(3:8)]
# Drop irrelevant columns
# drop_data <- data[,!names(data)%in% c('loc','comment','...1')]
# drop_data <- data %>% select(-loc,-comment,-...1)
drop_data <- data[,c(3:8)]
drop_data
drop_data %>% filter(species=='humbug'& treatment== 'control') %>% summarise(mean = mean(activity))
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
table_activity<-fit1 %>% select(statistic,conf.low,conf.high,p.value,parameter)
table_sl <- fit2 %>% select(statistic,conf.low,conf.high,p.value,parameter)
table_activity
table_activity %>% filter(species==humbug) %>% select(con.low)
table_activity %>% filter(species==humbug)
table_activity %>% filter(species=='humbug')
table_activity %>% filter(species=='humbug') %>% select(conf.high)
#
# data_species <- c('acantho','ambon','chromis','humbug','lemon','whitedams')
# pval <- c()
# dfval <- c()
# mean_difference <- c()
# for (i in 1:6) {
#   fit_control <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'control')
#
#   fit_CO2 <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'CO2')
#
#   # fit_control_temp <- mean()
#  mean_difference[i] <-  abs( ( drop_data %>% filter(species==data_species[i]& treatment=='control') %>% summarise(mean = mean(activity)))-   (     drop_data %>% filter(species==data_species[i]& treatment== 'CO2' ) %>% summarise(mean = mean(activity))
#
#
#  pval[i] <- t.test(fit_control[3],fit_CO2[3])$p.value
#  dfval[i]<- t.test(fit_control[3],fit_CO2[3])$df
#
# }
#
# for (i in 1:6) { print(i)}
#
# pval
# dfval
# mean_difference
#如果没有安装dplyr，rstatix和reshape2这三个R包，先去掉下面三行的#，运行进行安装
# install.packages("BiocManager")
# BiocManager::install("dplyr")
# BiocManager::install("rstatix")
# BiocManager::install("reshape2")
#
# library(dplyr)
# library(rstatix)
# library(reshape2)
# result=melt(fit1) %>%
#   group_by(species) %>%
#   t_test(species ~ treatment)
# result
# Provide the difference in means, their 95% confidence intervals, t-statistic, df and p-value.
fit1 <- drop_data %>% select(species,treatment,activity) %>% group_by(species) %>% summarise(broom::tidy(t.test(activity~treatment, data = cur_data())), .groups = "keep")
fit1 %>% select(statistic,conf.low,conf.high,p.value,parameter)
fit2<- drop_data %>% select(species,treatment,sl)%>% group_by(species) %>% summarise(broom::tidy(t.test(sl~treatment, data = cur_data())), .groups = "keep")
fit2 %>% select(statistic,conf.low,conf.high,p.value,parameter)
#
# data_species <- c('acantho','ambon','chromis','humbug','lemon','whitedams')
# pval <- c()
# dfval <- c()
# mean_difference <- c()
# for (i in 1:6) {
#   fit_control <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'control')
#
#   fit_CO2 <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'CO2')
#
#   # fit_control_temp <- mean()
#  mean_difference[i] <-  abs( ( drop_data %>% filter(species==data_species[i]& treatment=='control') %>% summarise(mean = mean(activity)))-   (     drop_data %>% filter(species==data_species[i]& treatment== 'CO2' ) %>% summarise(mean = mean(activity))
#
#
#  pval[i] <- t.test(fit_control[3],fit_CO2[3])$p.value
#  dfval[i]<- t.test(fit_control[3],fit_CO2[3])$df
#
# }
#
# for (i in 1:6) { print(i)}
#
# pval
# dfval
# mean_difference
#如果没有安装dplyr，rstatix和reshape2这三个R包，先去掉下面三行的#，运行进行安装
# install.packages("BiocManager")
# BiocManager::install("dplyr")
# BiocManager::install("rstatix")
# BiocManager::install("reshape2")
#
# library(dplyr)
# library(rstatix)
# library(reshape2)
# result=melt(fit1) %>%
#   group_by(species) %>%
#   t_test(species ~ treatment)
# result
# Provide the difference in means, their 95% confidence intervals, t-statistic, df and p-value.
fit1 <- drop_data %>% select(species,treatment,activity) %>% group_by(species) %>% summarise(broom::tidy(t.test(activity~treatment, data = cur_data())), .groups = "keep")
fit1
fit2<- drop_data %>% select(species,treatment,sl)%>% group_by(species) %>% summarise(broom::tidy(t.test(sl~treatment, data = cur_data())), .groups = "keep")
fit2 %>% select(statistic,conf.low,conf.high,p.value,parameter)
control <- drop_data %>% filter(species=='humbug'& treatment== 'control') %>% summarise(mean = mean(activity))
CO2 <- drop_data %>% filter(species=='humbug'& treatment== 'CO2') %>% summarise(mean = mean(activity))
t.test(control,CO2)
control <- drop_data %>% filter(species=='humbug'& treatment== 'control') %>% select(activity)
CO2 <- drop_data %>% filter(species=='humbug'& treatment== 'CO2') %>% select(activity)
t.test(control,CO2)
drop_data$animal_id %>% unique()
drop_data$animal_id %>% summarise(,.groups = species)
drop_data %>% summarise(,.groups = species)
drop_data %>% group_by(species) %>% summarise(,.groups = )
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups = )
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups = ) %>% unique()
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups = )
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups = ) %>% unique()
# Drop irrelevant columns
# drop_data <- data[,!names(data)%in% c('loc','comment','...1')]
# drop_data <- data %>% select(-loc,-comment,-...1)
drop_data <- data[,c(3:8)]
drop_data
# Check spelling in species and treatment but also generate a summary table
checked_data1 <- drop_data$species %>% unique()
checked_data2 <- drop_data$treatment %>% unique()
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups = ) %>% unique()
cda <- drop_data %>% group_by(species,treatment) %>% mutate(species = as.factor(species))
levels(cda$species)
# Use flextable to render the summary table in a tidy format
# mean_data <- mean(drop_data)
# SE_data <- drop_data %>% summarise(sd())
# cda <- drop_data %>% group_by(species,treatment) %>% mutate(species = as.factor(species))
#  levels(cda$species)
# Use flextable to render the summary table in a tidy format
mean_sd <- list(mean=~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE)
)
drop_data  %>% group_by(species,treatment,size)%>% summarise(across(where(is.numeric)&! animal_id, mean_sd)) %>% flextable(,col_keys = c("species","treatement","size","sl_mean","sl_sd","activity_mean","activity_sd")) %>% add_header_row(, values = c("", "sl","activity"), colwidths = c(3, 2,2)) %>% align(, i = 1, part = "header", align = "center")
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data <- na.omit(data)
data
# Drop irrelevant columns
# drop_data <- data[,!names(data)%in% c('loc','comment','...1')]
# drop_data <- data %>% select(-loc,-comment,-...1)
drop_data <- data[,c(3:8)]
drop_data
# Check spelling in species and treatment but also generate a summary table
checked_data1 <- drop_data$species %>% unique()
checked_data2 <- drop_data$treatment %>% unique()
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups = ) %>% unique()
cda <- drop_data %>% group_by(species,treatment) %>% mutate(species = as.factor(species))
levels(cda$species)
# Use flextable to render the summary table in a tidy format
# mean_data <- mean(drop_data)
# SE_data <- drop_data %>% summarise(sd())
# cda <- drop_data %>% group_by(species,treatment) %>% mutate(species = as.factor(species))
#  levels(cda$species)
# Use flextable to render the summary table in a tidy format
mean_sd <- list(mean=~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE)
)
drop_data  %>% group_by(species,treatment,size)%>% summarise(across(where(is.numeric)&! animal_id, mean_sd)) %>% flextable(,col_keys = c("species","treatement","size","sl_mean","sl_sd","activity_mean","activity_sd")) %>% add_header_row(, values = c("", "sl","activity"), colwidths = c(3, 2,2)) %>% align(, i = 1, part = "header", align = "center")
# %>% summarise(across(starts_with("sl"), .names = "mean&sd"))
file.create("D:/S2 2022/BIOL3207/week6/cloning repo/JamesU7457462/.gitignore")
dir.create("D:/S2 2022/BIOL3207/week6/cloning repo/JamesU7457462/week6 workshop/figures/")
library(png)
acantho_logo <- readPNG('figures/acantho.png')
ambon_logo <- readPNG('figures/ambon.png')
chromis_logo <- readPNG('figures/chromis.png')
humbug_logo <- readPNG('figures/humbug.png')
lemon_logo <- readPNG('figures/lemon.png')
whitedams_logo <- readPNG('figures/whitedams.png')
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(drop_data , aes(x =species, y =activity,col=treatment)) +geom_boxplot()+ ggtitle("difference between control and acidification treatments") + theme(plot.title = element_text(hjust = 0.5))+annotation_raster(acantho_logo,.5,1.5,50,60)+annotation_raster(ambon_logo,1.5,2.5,50,60)+annotation_raster(chromis_logo,2.5,3.5,50,60)+annotation_raster(humbug_logo,3.5,4.5,50,60)+annotation_raster(lemon_logo,4.5,5.5,50,60)+annotation_raster(whitedams_logo,5.5,6.5,50,60)
# Use ggsave to save the figure
ggsave('figures/1.png')
# The Desktop shows the changes in the window, like +figures/
## NO, because the images on github would not display because DNS could not resolve to the ip address of the image outbound address, so I would not choose to view the images on the web.
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
data1 <- drop_data[drop_data$species=='chromis'|drop_data$species=='lemon'| drop_data$species=='acantho',]
ggplot(data1,aes(x =species, y =activity,col=treatment))+geom_boxplot()+annotation_raster(acantho_logo,.5,1.5,40,50)+annotation_raster(chromis_logo,1.5,2.5,40,50)+annotation_raster(lemon_logo,2.5,3.5,40,50)
drop_data %>% filter(species=='humbug'& treatment== 'CO2') %>% summarise(mean = mean(activity))
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
#
# data_species <- c('acantho','ambon','chromis','humbug','lemon','whitedams')
# pval <- c()
# dfval <- c()
# mean_difference <- c()
# for (i in 1:6) {
#   fit_control <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'control')
#
#   fit_CO2 <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'CO2')
#
#   # fit_control_temp <- mean()
#  mean_difference[i] <-  abs( ( drop_data %>% filter(species==data_species[i]& treatment=='control') %>% summarise(mean = mean(activity)))-   (     drop_data %>% filter(species==data_species[i]& treatment== 'CO2' ) %>% summarise(mean = mean(activity))
#
#
#  pval[i] <- t.test(fit_control[3],fit_CO2[3])$p.value
#  dfval[i]<- t.test(fit_control[3],fit_CO2[3])$df
#
# }
#
# for (i in 1:6) { print(i)}
#
# pval
# dfval
# mean_difference
#如果没有安装dplyr，rstatix和reshape2这三个R包，先去掉下面三行的#，运行进行安装
# install.packages("BiocManager")
# BiocManager::install("dplyr")
# BiocManager::install("rstatix")
# BiocManager::install("reshape2")
#
# library(dplyr)
# library(rstatix)
# library(reshape2)
# result=melt(fit1) %>%
#   group_by(species) %>%
#   t_test(species ~ treatment)
# result
# Provide the difference in means, their 95% confidence intervals, t-statistic, df and p-value.
fit1 <- drop_data %>% select(species,treatment,activity) %>% group_by(species) %>% summarise(broom::tidy(t.test(activity~treatment, data = cur_data())), .groups = "keep")
fit1 %>% select(statistic,conf.low,conf.high,p.value,parameter)
fit2<- drop_data %>% select(species,treatment,sl)%>% group_by(species) %>% summarise(broom::tidy(t.test(sl~treatment, data = cur_data())), .groups = "keep")
fit2 %>% select(statistic,conf.low,conf.high,p.value,parameter)
<<<<<<< Updated upstream
fit_control <- drop_data %>% select(species,treatment,activity) %>%  filter(species=='acantho'& treatment== 'control')
# fit_control <- as.numeric(as.character(fit_control))
fit_control <- as.numeric(unlist(fit_control))
fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  mean()
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  mean(.)
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  mean([[.x]])
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  summarise(mean(.))
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  summarise(mean())
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  summarise(mean(.x))
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>%  summarise(mean())
drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity)
#
# # fit_control <- as.numeric(as.character(fit_control))
# fit_control <- as.numeric(unlist(fit_control))
#
# fit_control_temp <-mean(fit_control)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity) %>% summarise(mean())
drop_data %>% filter(species=='acantho'& treatment== 'control')
drop_data %>% filter(species=='acantho'& treatment== 'control') %>% select(activity)
fit_control <- drop_data %>% filter(species=='acantho'& treatment== 'control') %>% summarise(mean = mean(activity))
View(fit_control)
?fig.cap
#
data_species <- c('acantho','ambon','chromis','humbug','lemon','whitedams')
pval <- c()
dfval <- c()
mean_difference <- c()
for (i in 1:6) {
fit_control <- drop_data %>%
select(species,treatment,activity) %>%
filter(species==data_species[i]& treatment== 'control')
fit_CO2 <- drop_data %>%
select(species,treatment,activity) %>%
filter(species==data_species[i]& treatment== 'CO2')
# fit_control_temp <- mean()
mean_difference[i] <-  abs( ( drop_data %>% filter(species==data_species[i]& treatment=='control') %>% summarise(mean = mean(activity)))-   (     drop_data %>% filter(species==data_species[i]& treatment== 'CO2' ) %>% summarise(mean = mean(activity))
pval[i] <- t.test(fit_control[3],fit_CO2[3])$p.value
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
drop_data %>%
group_by(species) %>%
t_test(activity ~ treatment,var.equal=T)
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data <- na.omit(data)
data
=======
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
table_activity<-fit1 %>% select(statistic,conf.low,conf.high,p.value,parameter)
table_sl <- fit2 %>% select(statistic,conf.low,conf.high,p.value,parameter)
control <- drop_data %>% filter(species=='humbug'& treatment== 'control') %>% select(activity)
CO2 <- drop_data %>% filter(species=='humbug'& treatment== 'CO2') %>% select(activity)
t.test(control,CO2)
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups = ) %>% unique()
>>>>>>> Stashed changes
# Drop irrelevant columns
# drop_data <- data[,!names(data)%in% c('loc','comment','...1')]
# drop_data <- data %>% select(-loc,-comment,-...1)
drop_data <- data[,c(3:8)]
drop_data
# Check spelling in species and treatment but also generate a summary table
checked_data1 <- drop_data$species %>% unique()
checked_data2 <- drop_data$treatment %>% unique()
<<<<<<< Updated upstream
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups ) %>% unique()
drop_data %>%
group_by(species) %>%
t_test(activity ~ treatment,var.equal=T)
library(tidyverse)
drop_data %>%
group_by(species) %>%
t_test(activity ~ treatment,var.equal=T)
library(rstatix)
drop_data %>%
group_by(species) %>%
t_test(activity ~ treatment,var.equal=T)
#
# data_species <- c('acantho','ambon','chromis','humbug','lemon','whitedams')
# pval <- c()
# dfval <- c()
# mean_difference <- c()
# for (i in 1:6) {
#   fit_control <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'control')
#
#   fit_CO2 <- drop_data %>%
#     select(species,treatment,activity) %>%
#     filter(species==data_species[i]& treatment== 'CO2')
#
#   # fit_control_temp <- mean()
#  mean_difference[i] <-  abs( ( drop_data %>% filter(species==data_species[i]& treatment=='control') %>% summarise(mean = mean(activity)))-   (     drop_data %>% filter(species==data_species[i]& treatment== 'CO2' ) %>% summarise(mean = mean(activity))
#
#
#  pval[i] <- t.test(fit_control[3],fit_CO2[3])$p.value
#  dfval[i]<- t.test(fit_control[3],fit_CO2[3])$df
#
# }
#
# for (i in 1:6) { print(i)}
#
# pval
# dfval
# mean_difference
#如果没有安装dplyr，rstatix和reshape2这三个R包，先去掉下面三行的#，运行进行安装
# install.packages("BiocManager")
# BiocManager::install("dplyr")
# BiocManager::install("rstatix")
# BiocManager::install("reshape2")
#
# library(dplyr)
# library(reshape2)
# result=melt(fit1) %>%
#   group_by(species) %>%
#   t_test(species ~ treatment)
# result
# Provide the difference in means, their 95% confidence intervals, t-statistic, df and p-value.
## this one
library(rstatix)
drop_data %>%
group_by(species) %>%
t_test(activity ~ treatment,var.equal=T)
## or this one
fit1 <- drop_data %>% select(species,treatment,activity) %>% group_by(species) %>% summarise(broom::tidy(t.test(activity~treatment, data = cur_data())), .groups = "keep")
fit1 %>% select(statistic,conf.low,conf.high,p.value,parameter)
fit2<- drop_data %>% select(species,treatment,sl)%>% group_by(species) %>% summarise(broom::tidy(t.test(sl~treatment, data = cur_data())), .groups = "keep")
fit2 %>% select(statistic,conf.low,conf.high,p.value,parameter)
=======
drop_data %>% group_by(species,animal_id) %>% summarise(,.groups = ) %>% unique()
cda <- drop_data %>% group_by(species,treatment) %>% mutate(species = as.factor(species))
levels(cda$species)
# Use flextable to render the summary table in a tidy format
# mean_data <- mean(drop_data)
# SE_data <- drop_data %>% summarise(sd())
# cda <- drop_data %>% group_by(species,treatment) %>% mutate(species = as.factor(species))
#  levels(cda$species)
# Use flextable to render the summary table in a tidy format
mean_sd <- list(mean=~mean(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE)
)
drop_data  %>% group_by(species,treatment,size)%>% summarise(across(where(is.numeric)&! animal_id, mean_sd)) %>% flextable(,col_keys = c("species","treatement","size","sl_mean","sl_sd","activity_mean","activity_sd")) %>% add_header_row(, values = c("", "sl","activity"), colwidths = c(3, 2,2)) %>% align(, i = 1, part = "header", align = "center")
# %>% summarise(across(starts_with("sl"), .names = "mean&sd"))
drop_data  %>% group_by(species,treatment,size)%>% summarise(across(where(is.numeric)&! animal_id, mean_sd))
`r "The NULL hypothesis is that there is no difference between two treatment about humbug specie  , the evidence of  is that the p-value is " table_activity$p.value `
# mean of different treatment
# the mean of activity about humbug is          , and the mean difference between two treatments is              , the confidential interval is  0.83~9.9
"The NULL hypothesis is that there is no difference between two treatment about humbug specie  , the evidence of  is that the p-value is " table_activity$p.value
table_activity$p.value
# mean of different treatment
# the mean of activity about humbug is          , and the mean difference between two treatments is              , the confidential interval is  0.83~9.9
"The NULL hypothesis is that there is no difference between two treatment about humbug specie  , the evidence of  is that the p-value is "
table_activity %>% select(species=='humbug')
table_activity %>% select(,species=='humbug')
subset(table_activity,species='humbug')
subset(table_activity,species='humbug')
subset(table_activity,species='humbug')
table_activity[which('humbug'),p.value]
table_activity[which(species=='humbug'),p.value]
table_activity[which(table_activity$species=='humbug'),p.value]
table_activity[which(table_activity$species=='humbug'),which(p.value)]
table_activity[which(table_activity$species=='humbug'),ncol(p.value)]
table_activity[which(table_activity$species=='humbug'),]
table_activity[which(table_activity$species=='humbug'),] %>% select(p.value)
permuted_data <- drop_data %>% filter(species=='humbug')
drop_data %>% filter(species=='humbug')
drop_data %>% filter(species=='humbug') %>% select(treatment,activity)
drop_data %>% filter(species=='humbug') %>% select(treatment,activity) %>% mutate(ID = ID[sample(row_number())])
>>>>>>> Stashed changes
# add 10000 loops variable
n_reps <- 10000
# create the sample distribution from 1 to 10000
samp_dist <- rep(0,n_reps)
# use the for loop to construct the loop structure
for (i in 1:n_reps)
{
<<<<<<< Updated upstream
# generate the permuated group
permuted_data <- drop_data %>% filter(species=='humbug') %>% select(treatment,activity)
# use the t.test to figure out the mean difference between permuted set_A and set_B
permuted_t_test_results <- t.test(permuted_data$activity[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# loop again
samp_dist[i] <- permuted_t_test_results$statistic
}
install.packages("Deducer")
library(deducer)
library(deducer)
library(Deducer)
install.packages("rJava")
library(Deducer)
library(rJava)
install.packages("JVM")
library(rJava)
library(JVM)
drop_data %>% filter(species=='humbug') %>% select(treatment,activity) %>% mutate(treatment=treatment[sample(row_number())])
drop_data %>% filter(species=='humbug') %>% select(treatment,activity)
=======
# generate the permuated group by sampling the ID
permuted_data <- drop_data %>% filter(species=='humbug') %>% select(treatment,activity)
# use the t.test to figure out the mean difference between permuted set_A and set_B
permuted_t_test_results <- t.test(permuted_data[which(permuted_data$treatment=="control")],permuted_data[which(permuted_group_data$treatment=="CO2")],var.equal=T)
# loop again
samp_dist[i] <- permuted_t_test_results$statistic
}
# add 10000 loops variable
n_reps <- 10000
# create the sample distribution from 1 to 10000
samp_dist <- rep(0,n_reps)
# use the for loop to construct the loop structure
for (i in 1:n_reps)
{
# generate the permuated group by sampling the ID
permuted_data <- drop_data %>% filter(species=='humbug') %>% select(treatment,activity)
# use the t.test to figure out the mean difference between permuted set_A and set_B
permuted_t_test_results <- t.test(permuted_data$activity[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_group_data$treatment=="CO2")],var.equal=T)
# loop again
samp_dist[i] <- permuted_t_test_results$statistic
}
>>>>>>> Stashed changes
# add 10000 loops variable
n_reps <- 10000
# create the sample distribution from 1 to 10000
samp_dist <- rep(0,n_reps)
# use the for loop to construct the loop structure
for (i in 1:n_reps)
{
<<<<<<< Updated upstream
# generate the permuated group
permuted_data <- drop_data %>% filter(species=='humbug') %>% select(treatment,activity) %>% mutate(treatment=treatment[sample(row_number())])
=======
# generate the permuated group by sampling the ID
permuted_data <- drop_data %>% filter(species=='humbug') %>% select(treatment,activity)
>>>>>>> Stashed changes
# use the t.test to figure out the mean difference between permuted set_A and set_B
permuted_t_test_results <- t.test(permuted_data$activity[which(permuted_data$treatment=="control")],permuted_data$activity[which(permuted_data$treatment=="CO2")],var.equal=T)
# loop again
samp_dist[i] <- permuted_t_test_results$statistic
}
<<<<<<< Updated upstream
=======
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_test_statistic)))
permuted_data[which(treatment=='control')]$activity
permuted_data[which(permuted_data$treatment=='control')]$activity
permuted_data$activity[which(permuted_data$treatment=='control')]
t.test(permuted_data$activity[which(permuted_data$treatment=='control')],permuted_data$activity[which(permuted_data$treatment=='CO2')])
t_test_statistic<-t.test(permuted_data$activity[which(permuted_data$treatment=='control')],permuted_data$activity[which(permuted_data$treatment=='CO2')])$statistic
>>>>>>> Stashed changes
t_test_statistic<-t.test(permuted_data$activity[which(permuted_data$treatment=='control')],permuted_data$activity[which(permuted_data$treatment=='CO2')])$statistic
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_test_statistic)))
# use ggplot to create the histogram of plot_tibble
ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
plot_tibble
permutation_pvalue <- mean(plot_tibble$extreme)
permutation_pvalue
<<<<<<< Updated upstream
=======
t_test_statistic
samp_dist
permuted_data
permuted_data$activity[which(permuted_data$treatment=="control")]
permuted_data$activity[which(permuted_data$treatment=="CO2")]
permuted_data$activity[which(permuted_data$treatment=="control")]
permuted_data$activity[which(permuted_data$treatment=="control")]
permuted_data$activity[which(permuted_data$treatment=="CO2")]
>>>>>>> Stashed changes
